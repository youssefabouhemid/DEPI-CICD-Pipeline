// Jenkins Pipeline steps:
    // 1. THE EC2 INSTANCE WOULD NEED TO HAVE IAM ROLE ATTACHED TO IT WHICH IS: AmazonEC2ContainerRegistryFullAccess
    // 2. Download the Publish Over SSH Plugin
    // 3. Set up K8s server configs in Manage_Jenkins -> System Configuration
    // 4. set up a pipeline build
    // 5. choose following options:
        // GitHub Project
        // Parametirized Project; Parameters(awsRegion, ecrRepo, accountId)
        // GitHub hook trigger for GITScm polling
        // Poll SCM with empty schedule
        // Pipeline from SCM

// awsRegion = "us-east-1"
// ecrRepo = "python/depi_project"
// accountId = "539247483379"

pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile in the current directory
                    docker.build('python_app_image:latest', '.') // Tag as latest
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    // AWS ECR login
                    sh """
                        aws ecr get-login-password --region ${params.awsRegion} | docker login --username AWS --password-stdin ${params.accountId}.dkr.ecr.${params.awsRegion}.amazonaws.com
                    """

                    // Tag the image as latest
                    sh "docker tag python_app_image:latest ${params.accountId}.dkr.ecr.${params.awsRegion}.amazonaws.com/${params.ecrRepo}:latest"

                    // Push the image to ECR
                    sh "docker push ${params.accountId}.dkr.ecr.${params.awsRegion}.amazonaws.com/${params.ecrRepo}:latest"
                }
            }
        }

        stage('Apply/Notify Kubernetes') {
            steps {
                sshPublisher(
                    publishers: [
                        sshPublisherDesc(
                            configName: 'kuberenetes_server',
                            transfers: [
                                sshTransfer(
                                    cleanRemote: false,
                                    excludes: '',
                                    execCommand: 'sudo kubectl apply -f kubernetes/python-deployment.yaml 2> log.txt',
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: '',
                                    remoteDirectorySDF: false,
                                    removePrefix: '',
                                    sourceFiles: ''
                                )
                            ],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                            verbose: false
                        )
                    ]
                )
            }
        }
    }
}
